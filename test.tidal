setcps 1

d1 $ fast 2 $ every 2 ("<0.1 0>" <~) $ s "~ bd"

d1 $ s "bd ~ bd ~"

hush

d2 $ stack [
     every "[2 | 8]" (# vowel "a")
   $ every 4 (jux rev)
   $ every 3 ("[0.125 | 0.125 | 0.1]" <~)
   -- $ every 3 (0.125 <~)
   $ every 8 (|+ "0 12")
   -- $ every 2 (# gain "<1 [0.7 1.2 1]>")
   $ note "0 ~ 7 ~ 7 <6 5> 3 3" # s "jvbass",
   "~ lt ~ mt",
   "hh*8" # (pan $ range 0 1 $ slow 4 $ saw) # gain 0.7,
    every 1 (# gain "[0 | 0 | 0 | 0 | 0 | 0.7]") $ s "~ <[cp*2 cp] [cp ~ cp cp]>"
   ]


d3 $ s "arpy" # speed "<2 3 1>"
d3 $ every 1 (# speed "<2 3 1>") $ s "arpy" -- equivalent (# ) is a verb


d1 silence

hush

d1 $ sound "[clap ~, arpy arpy:4 arpy:2]"
d1 $ sound "{clap ~, arpy arpy:4 arpy:2}"



d1 $ n ( fmap (*1) $ run 4) # s "supersaw" # decay "[1 0.2]/4" # voice "[0.5 0]/8"


d2 $ stack [s "db*2", s "~ jvbass"]
d2 silence

d3 $ fast 2 $ n "<c2 c3 c4> e3 g3" # s "superpiano"

d3 $ s "superpiano*4" # n (run 2)

d4 $ s "[bd(3,8), cp(2,8), hh(7,8), bass:2(7,16), bass:7(3,8)]"

p "euclid rhythm demo" $ s "[bass:1(7,8), arpy:1(12,16)]"

p "d1" $ s "bass:5*8" # lpf (slow 2 $ range 1000 3000 $ sine)

p "square" $ s "bass*8" # n (irand 8)

p "note" $ note (scale "phrygian" "0 0 0 3 6 7 7 0") # sound "supersquare"


p "chop" $ slow 2 $ jux rev $ chop 32 $ s "bd*4 [sn cp] [hh future]*2 [cp feel]"

p "striate" $ chop 4 $ sound "numbers:0 numbers:1 numbers:2 numbers:3"

p "s" $ sound "breaks125"

// speed affect pitch
d1 $ sound "jungbass:6" + speed "1 2 4"
hush

--------------
--- playground 0: build up and release
--- how to
------

let sil = silence


d1 $ s "909!4"

d10 sil

d2 $ s "808cy*8" # n (run 8) # legato 1

d2 sil

d3 $ qtrigger 2
  -- start from beginning
  $ s "808cy*16" # n (run 16)

d3 $ slow 2 $ ( n (run 10) )|/ 100

d3 $ qtrigger 2
 -- needed so that we won't jump to the biggest
  $ s "808ht*16" # n (run 16)
     # gain (slow 200 $ range 0 2 $ sine)



d3 sil

d2 sil

hush



d1 sil



---------------
-- tuturial 0
---------------
d1 $ s "bsnoise/2" # n "0"
d2 $ s "hh*4"
hush

-- week 1 mini notation

d1 $ s "kick snare:3"
d2 $ "[2 3 [7 1] 0] 7 [5 [2 [8 6] 1 0] 3]" # s "clap"
d3 $ s "hi lo [lo [hi lo] lo] hi"
d3 silence
hush


d1 $ sound "<cpu:7*8 ~>"
hush

---- speeding up, repeating, and slowing down
d1 $ s "[hi lo]*3"
d1 $ s "hi lo*3"
d1 $ s "hi [hi lo]*1.5"
d1 $ s "hi lo!6"

d1 $ s "hi lo/2"
d1 $ slow 2 $ "hi lo ~ ~"
---- alternating with /
d1 $ fast 2 $ s "clap [hi lo bd sd]/2"
d1 $ s "[clap sd mt ht] [lo hi bd]/2"

hush

---- polyphony with ,
d1 $ s "[arpy*3, clap clap, ~ ht lt mt, bd sn] [clap snare]"
d1 $ fast 2 $ s "[bd sd, arpy arpy:3 arpy:6]"
d1 $ fast 2 $ s "{bd sd, arpy arpy:3 arpy:6}"

hush

---- rhythmic feet with .
d1 $ s "[bd sd] [mt . ht lt] [hi lo]"
d1 $ s "bd sd . mt [ht lt]. hi lo"

hush

---- one step per cycle with <>
d1 $ fast 3 $ s "hi [arpy arpy:1 arpy:2]/3"
d1 $ fast 3 $ s "hi <arpy arpy:1 arpy:2>" -- equivalent
d1 $ fast 2 $ s "hi <arpy [arpy:1 arpy:3] arpy:2>"

hush
-- REVISION TASKS

-- Copy each of the following patterns in turn, and edit them so that they
-- are shorter, using the "<>", "!", "[]" and/or "." introduced above.

d1 $ sound "kick snare!2"

d1 $ sound "kick . snare*2"

d1 $ sound "[kick snare]*3"

d1 $ n "0 <1 2 3>" # sound "cpu2"

d1 $ n "0 0 2 . 4 5 6 7 . 4 1 . 0 3 0 3" # sound "cpu2"

d1 $ sound "[kick snare]!3 clap"

d1 $ sound "[kick snare]*3 clap"

d1 $ sound "bd sd!3 bd sd*3"

hush
-- Trying to make code as short as possible is called "golfing" for some reason.
-- It can be useful as a form of practice, but sometimes longer code
-- is actually much easier to understand and edit!

---- week 2 effect

d1 $ n "c" # s "superpiano" # octersubsub 1
d1 $ n "[3 3] 1 2 . [4 5 0] 0" # s "cpu" # squiz "2 4"
d1 $ n "3 1 2 [3 5]" # s "cpu" # vowel "e p" -- use p to disable the effect
d1 $ n "0 2 4" # s "kick" # speed 0.4 -- raise or lower the pitch
d1 $ n "[1 1] 2 3 [0 6]" # s "cpu" # crush 2
d1 $ n "[0 0] 6 3 [0 0]" # s "cpu" # crush "3 [16 8]" -- notice the pattern here

d1 $ n "[1 1] 2 3 [0 6]" # s "cpu" # gain "1 0.3 2" --gain change the volume
--- speed: change the speed of the playback
--- e.g. 2 = play the sample twice as fast - which moves the note up an octave
d1 $ s "numbers:1 numbers:2 numbers:3" # speed "1 1.5 2"
d1 $ speed "1 1 . 2 2 . 3 3 3" # s "jungbass:6"

--- pan allows us to create a stereo effect: 0 left, 0.5 middle, 1 right
d1 $ s "numbers*3" # n "1 2 3" # pan "0 0.5 1"

--- shape adds distortion, but be careful - it makes it much louder
d1 $ s "clap:4(3,8)" # shape "0 0.99" # gain "0.8"

hush
--- manipulating time
setcps(135/60/4)
setcps 0.7

d1 $ n "0 2 [3 5] [4 7]" # s "cpu" # squiz "2 4"
d1 silence

d2 $ n "2*8 0(3,8)" # s "cpu2" # pan "0.3 1" # cps "0.5 1.3" -- cps changes everything
-- you can try with continous thing: # cps (saw + 0.5)

---- fast and slow
d1 $ fast 2 $ n "0 2 [3 5] [4 7]" # s "cpu2" # squiz 3

d1 $ slow 2 $ n "0 2 [3 5] [4 7]" # s "cpu"

--- fast/slow accepts a pattern

d1 $ slow "0.5 <1.5 1> " $ n "0 2 [3 5] [4 7]" # s "cpu2" # speed "<2 3 1.2>"

hush

--- combining patterns with arithmetic, plus the hurry function
d1 $ n "0 1 0 2 [4 2] 1 2*2 3" # s "cpu" # speed "1 2"

d1 $ speed "1 2 0.5" # s "dsynth" # speed "3 4"
 --- values speed coming from the right!
 --- "3 3 4"

d1 $ speed "1 2 0.5" # s "dsynth" |< speed "3 4" -- speed 3,4 it's doing nothing

d1 $ speed "1 2 0.5" # s "dsynth" >| speed "3 4" -- speed 1 2 0.5 is doing nothing


d1 $ speed "1 2 0.5" # s "dsynth" |* speed "1 0.5"


-- combining patterns are fun
d1 $ n "0 1 0 2 [4 2] 1 2*2 3" # s "cpu" # speed "<0.5 1 2>"

-- hurry: similar to fast, and raise the pitch
d1 $ hurry "<1.5 [2 0.5]>" $ n "0(3, 8) [1 4] 1 2*2" # s "cpu"

hush

--- number patterns
d1 $ n ("1 [2 3] 4 1*2" |*| "1 0.5*3 3") # s "kick"


--- saw is a pattern that slowly moves from 0 to 1 over a cycle
--- slow it down so the speed moves up over 4 cycles
d1 $ n ("1 [2 3] 4 1*2" |* "1 0.5*3 3") # s "cpu"
# speed "<1 2 4>"
|+ speed (slow 4 saw)

hush

---- explore every
--- cutting longer samples, beat slicing

setcps 1



d1 $ loopAt 20 $ chop 8 $ s "sick:2" # legato 1

hush

once $ s "sick:4"

d1 $ slice 8 (slow 2 $ run 8) $ s "sick:2" # legato 1

d2 $ fast 2 $ s "~ 808bd:3 ~ 808bd:3"

d1 $ every 3 (0.12 <~) $ every 3 (jux rev)
   $ every 2 (# crush 6)
   $ slice 16 (slow 7 $ run 16) $ s "sick:1" # cut 1 --- this is pretty good

xfade 1 $ loopAt 12 $ chop 12 $ s "sick:1" # legato 1 -- this is good

d1 silence

d1 $ every 3 rev $ slice 16 (slow 1 $ run 16) $ s "sick:1" # cut 1

hush

d1 $ s "bd sd ~ cp"

hush

d1 $ every 3 (fast 2) $  s "bd sd ~ cp"

-- we can treat the # speed 1 bit as a function. if you think
-- about it, it does something to a pattern, just like fast 2 does.

d1 $ every 4 (hurry 2) $ every 10 (# squiz 5) $ s "bd sd [~ cp] [bd*2 lt]"

hush


---- working with longer samples: cut vs legato

d1 $ fast 1 $ s "ho:4 hc ho:4 hc"

hush

-- ho is too long! Use cut groups
d1 $ fast 1 $ s "ho:4 hc ho:4 hc" # cut 1

d2 $ s "bd*8" # cut 1  -- cut apply to multiple groups, there might be issues

-- legato: make a sound fit its step
d1 $ s "sax"

d1 $ s "sax" # cut 1

d1 $ s "sax ~ ~ ~" # cut 1

d1 $ s "sax ~ ~ ~" # legato 1 ---usually... legato is more useful

d1 $ s "break:4(3,8)" # legato 1

hush

--- slice and splice

setcps 0.6

d1 $ s "break:4" -- not matching the cps

d1 $ splice 8 "0 1 2 3 4 5 6 7" $ s "break:4" # legato 1

d1 $ slice 8 "0 1 2 3 4 5 6 7" $ s "bev" # legato 1

d1 $ splice 8 ("0 1 2 3 4 5") $ s "break:4"

d2 $ s "kick snare*3 clap:3"

hush

---- chop and striate

d1 $ s "break:8"

once $ s "break:4"

--play part of the song. e.g play the last 25% of the sample
d1 $ s "break:8" # begin 0.75 # end 1

-- we can also use "unit c" to change the behavior of speed so it changes
-- the playback speed to match the cps
d1 $ s "break:8" # speed 1 # unit "c" # begin 0.75 # end 1

-- play four of those to fill the cycle
d1 $ s "break:8*4" # speed 1 # unit "c" # begin 0.75 # end 1

-- cumbersome: use splice slice / chop striate instead!

d1 $ loopAt 16 $ chop 4 $ s "bev"

-- loopAt makes sample fit the given number of cycles
d1 $ rev $ loopAt 2 $ chop 4 $ s "break:8"

-- if we slow down we can hear the gaps between bits
d1 $ slow 2 $ loopAt 2 $ chop 4 $ s "break:8"

d1 $ slow 2 $ loopAt 2 $ chop 4 $ s "break:8 break:9"

-- similar but different: overlapping bits
d1 $ slow 2 $ loopAt 2 $ striate 4 $ s "break:8 break:9"

-- just for fun
d1 $ slow 2 $ loopAt 2 $ striate 32 $ s "break:8 break:9"

d1 $ slow 4 $ jux rev $ loopAt 8 $ striate 128 $ s "bev*4" -- hmmm

hush

--- working with continous signals

d1 $ rarely (# speed 2)
   $ stut 8 0.2 0.05 $ s "bottle*2" # room 0.3 # sz 0.1

d1 silence

d2 $ speed (segment 32 $ range 0.5 5 tri)
  # s "click:1"
  # room 0.4 # lpf 1000 # sz (range 0.1 0.9 sine + (slow 2 saw))

d2 silence

d2 $ s "[909*4, ~ linnhats ~ linnhats]" # speed (range 1 3 perlin)

hush
d2 silence

d3 $ slow 4 $ s "future" <| n (run 5) # speed (rand + 0.5)
d3 silence

d4 $ every 2 (# crush "<4, 8>")
   $ struct "t(3, 8)" $ s "msg" # room 0.3 # gain 2

d4 silence

d5 $ degradeBy 0.1
   $ rarely (# crush 2)
   $ often (# gain 2) $ iter 8
   $ often (hurry 2)
   $ struct ( every 3 inv "t(3,8)" ) $ (s "jvbass" # n 2)
   # speed (range 1 3 tri)

d5 silence
once $ s "h"

d6 $ degradeBy 0.25 $ sometimes (jux (# speed "<3, 4>"))
   $ often (jux rev)
   $ every 3 (# shape 0.8)
   $ sometimes (# speed "<1, 2, 3>") $ s "can!16" # n (run 3)
   # gain (range 0.5 1.5 sine)
   # lpf (range 500 1500 tri)

xfade 6 $ often ((jux rev) . (# shape 0.7))
  $ every 3 (# smear 2)
  $ sometimes (# speed "<1, 2, 5>") $ s "industrial(7,8)" # n (run 2)
  # gain (range 0.5 1 sine)
  # room 0.2

d6 silence


---
---- this is a pretty good piece
-----
d7 -- $ rarely (|+| note "7 -7")
   -- $ iter 8
   -- $ chunk 4 (hurry 0.5)
   -- $ degradeBy (1/10)
   -- $ off 0.125 (|- note 12)
   -- $ often (# speed (range 1 3 sine+rand))
   -- $ often (# vowel "<o, u>")
   -- $ always (jux rev) . (# shape 0.3)
   $ s "superhammond"
   -- # n "[0 3] [4 6] 6 1"
   >| n (scale "melodicMinor" $ "0 0 5 7")
   -- # room 0.3 # sz (range 0.1 0.5 tri)
   -- # delay 0.3 # delaytime (1/4)
   -- # squiz (choose [1, 1, 0, 0, 0])


d7 silence


d1 $ s "supersaw(5,8)"

scaleList

hush

d7 silence

hush

----------------------
--- Random week
----------

-- rand, continous 0 to 1
-- it's completely deterministic though,
-- which can be problematic because humans are
-- really good at picking up patterns
resetCycles

d2 $ n "0*16" # s "cpu" # speed (rand + 1)

-- irand
-- a stream of random integers

d2 $ n (scale "dim7" $ struct "t(5,8)" $ irand(7) + 12)
  # sound "rash"


d2 $ s "jvbass"
  -- # n (scale "major" $ struct "t(5,8,<1,3>)" $ irand(8))
  # n (irand(8))
  # delay 0.9 # delaytime (1/3) # delayfb 0.8  -- echo

hush

-- mininotation
-- [|]
d2 $ n "[0|1*4|2 3 4|3*16]" # s "cpu"

d2 $ s "bd bd bd cp*4?0.9" --- 90% not playing, if omitted then 50%

hush

-- scramble, shuffle
-- cut into equal x parts and then sample with/without replacement
d2 $ scramble 4 $ n "0 1 2 3" # s "jvbass"

d2 $ scramble 4 $ s "bd bd cp [hh hh]"

hush

-- choose, wchoose
--- random source, there is no structure,
--  need to use with `segment` or `struct`
d2 $ s (segment 4 $ choose ["bd", "arpy", "kick"])

d2 $ s (struct "t(5, 8, <1, 3>)" $ choose ["bd", "bd", "arpy", "kick"])

d2 $ s (struct "t(5, 8, <1, 3>)" $ choose ["bd", "arpy", "kick"])

--
-- or by combining with something that _has_ structure
--
d2 $ squiz "2*2 4 6 8" # s (choose ["bd", "arpy"]) -- values, not pattern

-- different from
d2 $ squiz "2*2 4 6 8" # s "[bd|arpy]" -- pattern

hush

:t wchoose


:t squiz

d2 $ s (struct "t(3,8)" $ wchoose [("bd", 2), ("arpy", 1), ("kick", 1)])

-- squiz!!
d2 $ s "bd*8" # squiz (wchoose [(2,1), (8,0.5)])

d2 $ s "bd*8" # speed (wchoose [(2,1), (8,0.5)])

d2 $ s "bd*8" # speed "[2|2|8]*8"

d2 $ s "bd*8" # leslie (choose [2, 2, 8])

d2 $ s "alphabet*8" # n (irand 8) |+ note (choose [7, 0, 0])

d3 $ s "bd*4"

hush

-- disossociate the rand and rand with fast 1.01
d2 $ s "bd*8" # pan rand # speed (fast 1.01 $ range 1 2 rand)

-- or just shift it with 100000 cycle
d2 $ s "bd*8" # pan rand # speed (1000000 <~ (range 1 2 rand))

d3 $ s "bd*8" # speed (range 1 2 $ truRand 12141)


let truRand x = x <~ rand

hush

--- random week continued
----------


--- randcat
----wrandcat

d1 $ s (randcat ["bd sn", "arpy clap", "cpu(5,8)", "hh*16", "~", "~" ])


d1 $ vowel (randcat ["a e*2 i o", "e o u", "a a"]) # s "kick snare:4 clap"

hush


--- stripe
--- fast with some randomness
:t stripe

d1 $ stripe 2 $  n "0*2 3 2 ~ 3 4 5 ~" # s "cpu"

hush

-- degrade
--- degradeBy
d1 $ s "bd!8?"

d1 $ degrade $ s "bd!8"

d1 $ degradeBy 0.6 $ s "bd!8"

-- sometimes
--- sometimesBy
--- often = sometimesBy 0.75
--- rarely = sometimesBy 0.25
--- almostNever 0.1
--- almostAlways 0.9

d1 $ sometimes (# squiz 2) . rev $ s "arpy sn bd cp"

hush

--- somecycles: aligned with the cycle
---- somecyclesBy
d1 $ somecycles (# squiz 2) . rev $ s "arpy*2 ~ sn bd cp ~"

hush

--- slice
----- randslice
d1 $ loopAt 1 $ fast 4 $ randslice 4 $ s "break:8"

d1 $ slice 16 (segment 8 $ irand 16) $ s "break:8"

d1 $ loopAt 6 $ chop 8 $ s "sick:1"

d1 $ every 3 (# crush 6)
$ degradeBy 0.9 $ slice 64 (segment 16 $ irand 64)
$ s "sick:1"

hush


hush

d2 $ stack [
  s "909kick:8!4"
  # crush 10 # lpf 150 # lpq 0.15
  # delay 0.1 # delayfb 0.1 # delaytime 0.05
  # octersubsub 1 -- nice saturation, alternatively, octersub
  , s "909kick:8!4"
] # octersub 1



d1 -- $ off 0.125 (|- n 7)
$ swingBy (1/16) 4
-- $ sometimes (hurry 2)
$ n "a'min d'maj g'maj e'min" # s "padmh"

d1 silence


d3 $ n "c e g f" # s "padmh"

d3 silence

:t swingBy

---- working with scales

d1 $ segment 16 -- sample to create "events", 16 every cycle
  $ n (scale "minor"
      $ floor <$> (range 0 14 sine))
      -- convert decimal to integer with floor, maybe round too
  # s "supersaw" # lpf 1000 # lpq 0.1 # legato 0.5
  |- n 12


-- we can pattern the range too
d1 $ segment 16 -- sample to create "events" 16 every cycle
  $ n (scale "minor"
      $ floor <$> (range "<0 -7 5>" "<14 5 19 -9>" sine))
      -- convert decimal to integer with floor, maybe round too
  # s "supersaw" # lpf 1000 # lpq 0.1 # legato 0.5
  |- n 12

--- use struct to give structure
d1 -- $ off "e" (|+ n 12)
  $ struct "t(<9 7>,16)"
  $ n (scale "mixolydian"
      $ floor <$> (
          -- range "<0 -7 5>" "<3 -2 7 -9>"
          (slow 2 sine + cosine) * "<6 -3>" -- add waveforms gives surprises
        ) |+ "<0 -5 3>"
        )
  # s "supersaw" # lpf (fast 2 $ range 500 1400 saw)
  # lpq 0.1 # legato 0.5


scaleList


-- random start point, only work with samples
d1 $ s "909kick*8" # nudge'

let nudge' =  begin (truRand 2141)

m1


---
------------------
-- tutorial hard
------------------

setcps (130/60/4)


/// dirt samples https://github.com/tidalcycles/Dirt-Samples

// beat shifting, striate is necessary there
d1 $ every 3 (0.5 <~) $ every 2 (0.125 <~) $ every 2 (0.25 <~) $ striate 128 $ sound "breaks125:1"
d2 $ every 2 (0.25 <~) $ striate 4 $ sound "numbers:0 numbers:1 numbers:2 numbers:3"

d3 $ every 3 rev $ striate 128 $ sound "breaks157"

// speed changing, remember striate
// these 2 are equivalent (I think)
// have fun with lpf and lpq
d1 $ striate 128 $ sound "breaks125" # speed "[1 1 0.8 1 1 1.5]/5" # lpf "2000" # lpq "0.4"
d1 $ every 3 (+ speed "1.5") $ striate 128 $ sound "breaks125"


# 1. basic striate
# cool samples: fm:26, fm:31, fm:35
d1 $ slow 2 $ striate 32 $ sound "fm:26" # lpf "[500 1000 [2000|1000] 800 500]/5" # lpq "0.5"
hush

# 2. striate'
# striateBy (formerly called striate') is a variant of striate, with an extra parameter,
# which specifies the length of each part. striate still scans across the sample over a
# single cycle,
# but if each bit is longer, it creates a sort of stuttering effect.
d1 $ every 2 (jux rev) $ every 3 (0.25 <~) $ slow 4 $ spread (striate' 64) [0.1*2, 0.15] $ sound "fm:31"

# 3. striate with mutiple samples

# 4. fun with speed

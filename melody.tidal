d1 $ n "c'maj e'min" # s "supermandolin" # sz 0.8 # room 0.8

-- single note
d1 $ n "c ef" # s "supermandolin"

-- chord inversion: add ' to a chord, along with one or more i characters
d1 $ n "c'maj'ii" # s "supermandolin"

-- number of notes in the chord
d1 $ n "c'major7'6" # s "supermandolin"

-- open voicing
d1 $ n "c'major7'o" # s "supermandolin"

-- root can be set sharp or flat
d1 $ n "cs'maj c'maj cf'maj" # s "supermandolin"

-- octave can be set with number
d1 $ n "c4'maj c5'maj c6'maj" # s "supermandolin"

-- chords can be patterned
d1 $ n ("c e f" |+ "<'maj 'min>") # s "supermandolin"

-- arpeggio
d1 $ arp "up" $ n "c5'major7'5 e'min" # s "supermandolin" # sustain 0.8

hush


-- xbnz
d3
  -- $ off 0.125 (# crush 6) . (|+| note 7)
  $ note "[12 14] ~ [9 12] ~ [7 9] ~ [5 7] ~ [2 5] ~ [0 2] ~ [-3 0] ~ [-5 -3] ~"
  # s "dsynth:1" # cps 0.3
  # sus 0.2

d3 silence

hush



d1 $ chunk 4 (hurry 2)
   $ every 3 (# crush 3)
   $ iter 4
   $ jux (rev . (|*| speed 2))
   $ off (1/4) (|+| note "<[10 3] [7 1]>")
   $ off 0.125 (# speed 2)
   $ s "dsynth" <| note "e'min(5,8)" # gain 0.7
   -- # lpf (range 2000 4000 tri)
   -- # lpq 0.2

d1 silence

d2 $ s "hh:3*16"  # speed (range 1 4 sine)

d2 silence

d3 $ fast 2 $ s "[bd*4, ~ 808cy ~ 808cy]"

d3 silence

d3 $ sometimes (# crush 3)
  $ off 0.25 (|+ note "1 2 3 4")
  $ stut 8 0.2 0.05 $ s "gabba(5,8)"
  # speed (range 1 4 sine+rand)
  # lpf (range 1000 4000 tri) # lpq 0.3

hush

d5 $ iter 4 $ off 0.25 (# crush 3) . (jux rev)
   $ rarely (chop 8)
   $ struct "t(3,4) ~ t ~" $ s "gabba"

setcps (135/60/4)

-- lydian 0,2,4,6,7,9,11
-- phrygian 0 1 3 5 7 8 10
d2
   $ off 0.125 (|- 12)
   $ every (choose [2, 3]) ((# vowel "<a, o>"))
   $ sometimes (hurry 2)
   -- $ often (stut 8 0.5 (1/16))
   $ degradeBy 0.1
   -- $ chunk 3 ((# squiz 4))
   $ rarely (scramble 3)
   $ s "rash(3, 8)" # n (scale "phrygian" "0 0 5 6" + 12)

hush

---- abbr patterns with struct
d1 $ fast 2 $ s "808bd:2*2 808bd:2 ~"

d1 $ fast 2 $ struct ("t*2 t ~") $ s "808bd:2" -- the same

d1 $ fast 2 $ struct ("t*2 t f") $ s "808bd:2" -- the same

d1
   $ rarely (hurry 2)
   $ degradeBy 0.9
   $ rarely (jux rev . (# squiz 2))
   $ off 0.125 (|- note 12)
   $ smash 32 [8] $ s "sick:1" # legato 1 # gain 0.8

hush

d1 $ off 0.25 (|+ speed 2) . (# crush 3)
   $ degradeBy 0.2
   $ (|+ n (run 8))
   $ off 0.125 (|- note 12)
   $ note "c6(3,8) g7(3,8)" # s "jvbass"
   # lpf (range 1000 2000 tri)
   # lpq 0.1

d1 silence

d2 $ off 0.125 (# speed (range 1 3 sine+rand))
   $ every 3 (0.25 <~) $ every (irand 3) (# crush 3)
   $ s "drum(3, 8)" # room 0.2 # sz 0.3

d2 silence

d3 $ sometimes (|- note 7) $ off (choose [0.125, 0.25, 0.25]) (# squiz 2)
   $ s "metal*8" # lpf (range 500 1000 saw)

d3 silence

d1 $ every 2 (# octersub 1) $ chunk 4 (|+ note 7) $ s "jvbass"

d1 $ every 3 (# speed 4) $ chop 8 $ s "bass1" # octersub 0.5

:t octer
hush

d4 silence

d5 $ sometimes (# vowel "<a o>")
   -- $ off 0.125 (|+ n "<1 2 3>")
   $ striate 8 $ s "h(3,8)"

d5 silence


----- Tutorial part II -------
------ musical notes

--- notes in terms of number 0-11
d1 $ note "0 12" # s "supermandolin" # sus 2 # rel 1

--- tidal will return (0>1)|note: Note {unNote = 3.0}n
-- decimal number, will round itself
note "3"

note "c g bf as"
-- same as
note "0 7 10 10"

hush

-- octave
-- 0 is c5
note "c4 c5 c6"

-- n vs note
--- with synth, you can them interchangeably

d1 $ n "c a f e" # s "superpiano"

d1 $ note "c a f e" # s "superpiano"

--- with samples.
--- note, using speed to pitch up and down
d1 $ note "c a f e" # s "dbass"

d1 $ note "0 9 5 4" # s "dbass"

n "c a f e"
--- this won't work as expected
d1 $ n "c a f e" # s "dbass"

hush

--- 72 samples in rash, 0 is low
d1 $ n "0 9 5 4" # s "rash" |+ n 12 |+ n "<0 2 7 12>"

d1 $ n ("0 9 5 4" |+ 12 |+ "<0 2 7 12>") # s "rash" -- same

hush

---
--- chords
---

d1 $ n "c a f e" # s "supermandolin"

d1 $ n "[c'maj e'min a'min f'maj]/4"
# s "supermandolin" # sus 3 # rel 1 # legato 2

hush

-- radiohead creep
d1 $ qtrigger 1 $ jux (|- note 12) . rev $ struct "t(5,8,<0 4>)"
$ n "<g'maj b'maj c'maj c'min>" # s "supermandolin"
# room 0.3 # sz 0.2

-- you can get a list
import Sound.Tidal.Chords

chordList

chordTable

---ask for more notes
d1 $ n "c'maj'8" # s "superpiano"

hush


--- Arpeggio

d1 $ arpeggiate $ n "c'maj'4" # s "superpiano"

d1 $ arp "thumbup" $ n "<a'min7 bf'major7>" # s "superpiano"

hush


--- custom synth
d5 $ off "q" (|+ note "<[7 0] 12>") $ note "bf(5,8)"
# s "bday" # gain 0.8

xfade 1 -- $ iter 4
-- $ every 2 (stut 2 0.5 0.1)
$ every 4 (# crush 6) . rev
$ chunk 4 (hurry 0.5)
$ every 2 (# vowel "< a o i >")
$ off "e" (|+ note "<[-7 0] 5>") $ note "bf(5,8) af*2"
# s "bday" # gain (range 0.3 0.4 sine)
# pan (slow 2 $ range 0 1 tri)

d1 silence

d3 $ slice 64 (segment 16 $ irand 64)
$ s "vinyl:5" # legato 1 # gain 0.5 # lpf (range 800 100 sine+rand)


setcps(130/60/4)

d2 -- $ swingBy (1/8) 4
   $ fast 2
   $ jux (# speed 2)
   $ superimpose (stut 6 0.4 0.01) -- . (# vowel "e")
   $ superimpose (# lpf (range 800 1200 sine)) . (# crush "6") . (# delay 0.1) . (# delaytime 0.1) . (# delayfb 0.3)
   $ superimpose (|+ note "< 3 7 >")
   $ s "[909kick:2 ~ ~ 909kick:2 ~ ~ chaosperc:1 ~]"


d2 silence

d3 $ fast 2 $ s "~!6 909sn:7 ~"

d3 silence

d4 $ degrade $ s "909ho:8*16" # gain 0.3

d4 silence

d5 $ slow 4 $ s "footsteps:1? ~ footsteps:2? ~" # gain 0.4


d1 $ (|+ n 7)
   $ iter 4
   $ every 3 (# speed 2 )
   $ slice 16 (segment 8 $ irand 16) $ s "frozen:13" # legato 1 # gain 0.6

d1 silence

d3 $ every 3 (|- n "<[12 7] [7 5]>")
   $ arp "thumbup" $ n "a'min7" # s "supercomparator" # gain 0.8


d2 silence

d4 $ s "909kick*8" # gain 0.8

d4 $ splice 16 (slow 16 $ run 16) $ s "urban" # legato 1

d5 $ degradeBy 0.4
   $ every 3 (# crush 3)
   $ slow 16 $ scramble 16 $ chop 16 $ s "urban"

d5 silence
hush

---- tutorials: off
----

:t off

d1 $ n "c e" # s "arp:1"

xfade 1 $ off "2f" (|+ note "<7 12 -5>")
   $ n (slow 2 "c(5,8) e(3,8) f*2 e")
   # s "supermandolin" # legato 4

d3 $ sometimes (|+ n "<12 7>")
   $ n "c'major7" # s "supermandolin" # sus 4

d2 $ s "909sn:1 909hc ~ 909hc" # lpf 1500 # lpq 0.2

d1 $ jux rev $ chunk 4 (|+ note "<12 5 0>")
   $ off "q" (stut 4 0.5 0.1)
   $ sometimes (# crush 3)
   $ s "dbass" >| n "1 5" # gain 0.5
